<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>test peer js</title>
    <link
      rel="stylesheet"
      href="vendor/icons/css/material-design-iconic-font.min.css"
    />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <style>
    .container {
      display: flex;
    }
    video {
      width: 400px;
      height: 300px;
    }
    .myVideo,
    .otherVideo {
      background: gray;
      margin: 10px;
    }
  </style>
  <body>
    <div
      class="
        fixed
        hidden
        z-20
        incoming
        top-0
        left-0
        w-full
        h-full
        flex-items
        start
        justify-center
        bg-gray-200 bg-opacity-40
        p-4
        pt-8
      "
    >
      <div class="bg-white w-full max-w-xl rounded-lg mx-auto shadow-lg">
        <div class="rounded-lg p-4">
          <div class="flex items-center pl-0 lg:pl-10">
            <div class="w-12 h-12 mr-4">
              <img
                src="/user/default.png"
                alt="none"
                class="rounded-full w-full h-full ring-2 ring-indigo-300"
              />
            </div>
            <h3 class="font-semibold text-xl text-gray-500 word-breaks">
              Man is Calling you...
            </h3>
          </div>
          <div
            class="buttons flex items-center justify-between mt-7 px-0 lg:px-10"
          >
            <button
              class="
                reject
                p-3
                rounded-md
                bg-red-500
                animate-pulse
                h-12
                ring-red-300 ring-4
              "
            >
              <span class="text-white font-normal text-lg bg-red-500 p-2">
                Reject
              </span>
            </button>
            <button
              class="
                answer
                p-3
                rounded-md
                bg-green-500
                animate-pulse
                h-12
                ring-green-300 ring-4
              "
            >
              <span class="text-white font-normal text-lg bg-green-500 p-2">
                Answer
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      class="
        incall
        hidden
        fixed
        z-20
        top-0
        left-0
        w-full
        h-full
        grid
        items-center
        bg-gray-200 bg-opacity-40
        p-4
        pt-8
      "
    >
      <div
        class="
          bg-white
          w-full
          text-center
          max-w-xl
          rounded-lg
          mx-auto
          shadow-inner
        "
      >
        <div class="rounded-lg p-4 py-7">
          <div class="flex items-center flex-col pl-0">
            <div class="w-24 h-24">
              <img
                src="/user/default.png"
                alt="none"
                class="rounded-full w-full h-full ring-8 ring-indigo-300"
              />
            </div>
            <h3 class="font-semibold text-xl mt-4 text-gray-500 word-breaks">
              Mahesh Malla
            </h3>
          </div>
          <div class="time my-6">
            <span class="text-gray-400"> 02:15s </span>
          </div>
          <style>
            .buttons i {
              font-size: 25px;
            }
          </style>
          <div
            class="buttons flex items-center justify-center mt-20 px-0 lg:px-10"
          >
            <button
              style="line-height: 3.1rem"
              class="
                p-3
                rounded-full
                mr-3
                h-16
                w-16
                hover:bg-gray-300
                bg-gray-200 bg-opacity-50
                h-12
              "
            >
              <span class="text-gray-500 font-normal text-lg p-2">
                <i class="zmdi zmdi-mic"></i>
              </span>
            </button>
            <button
              style="line-height: 3.1rem"
              class="
                p-3
                rounded-full
                mr-3
                h-16
                hover:bg-gray-300
                w-16
                bg-gray-200 bg-opacity-50
                h-12
              "
            >
              <span class="text-gray-500 font-normal text-lg p-2">
                <i class="zmdi zmdi-volume-up"></i>
              </span>
            </button>
            <button
              style="line-height: 3.1rem"
              class="
                p-3
                rounded-full
                mr-3
                h-16
                hover:bg-red-500
                w-16
                bg-red-400 bg-opacity-100
                h-12
              "
            >
              <span class="text-white font-normal text-lg p-2">
                <i class="zmdi zmdi-phone-end"></i>
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <div
      class="
        fixed
        hidden
        z-20
        top-0
        left-0
        w-full
        h-full
        calling
        flex-items
        start
        justify-center
        bg-gray-200 bg-opacity-40
        p-4
        pt-8
      "
    >
      <div class="bg-white w-full max-w-xl rounded-lg mx-auto shadow-lg">
        <div class="rounded-lg p-4">
          <div class="flex items-center pl-0 lg:pl-10">
            <div class="w-12 h-12 mr-4">
              <img
                src="/user/default.png"
                alt="none"
                class="rounded-full w-full h-full ring-2 ring-indigo-300"
              />
            </div>
            <h3 class="font-semibold text-xl text-gray-500 word-breaks receiverId">
              Hari Ram
            </h3>
          </div>
          <div class="my-5 pl-0 lg:pl-10">
            <span class="calling_status text-gray-400"> Calling... </span>
          </div>
          <div class="buttons flex items-center justify-end mt-7 px-0 lg:px-10">
            <button
              class="
                cancelcall
                p-3
                rounded-md
                bg-red-500
                h-12
                ring-red-300 ring-4
              "
            >
              <span class="text-white  font-normal text-lg bg-red-500 p-2">
                Cancel
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="hidden">
      <audio id="other"></audio>
    </div>

    <div class="container-md max-w-xl mx-auto bg-white p-4 shadow-md mt-4">
      <h3 class="font-semibold text-gray-600 text-xl">Create a new call</h3>
      <div class="pid p-3 text-gray-400">dlksjfkdf09dsa8fsdlj</div>
      <div class="container max-w-xl flex mx-auto my-4">
        <input
          type="text"
          name=""
          id="rid"
          placeholder="receiver id"
          class="
            px-4
            flex-1
            py-3
            rounded
            outline-none
            border-none
            shadow
            bg-white
          "
        />
        <button
          class="px-4 py-2 w-32 shadow bg-green-300 text-white rounded ml-2"
          id="connect"
        >
          call
        </button>
      </div>
    </div>

    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script>
      let input = document.getElementById("pid");
      let btn = document.getElementById("connect");

      var peer = new Peer();
      peer.on("open", function (id) {
        console.log("My peer ID is: " + id);
        document.querySelector(".pid").innerText = id;
      });

      btn.onclick = async function () {
      
        // on open will be launch when you successfully connect to PeerServer
        // conn.on("open", function () {
        //   // here you have conn.id
        //   conn.send("hi!");
        // });

        try {
          let input = document.getElementById("rid");
          var mediaStream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false,
          });
          var conn = peer.connect(input.value);
          if(!conn){
            return alert('couldnot connect to this user.');
          }
          var call = peer.call(input.value, mediaStream);
          call.on("stream", function (stream) {
            var audio = document.getElementById("other");
            // var audio = document.querySelector("audio");
            audio.srcObject = stream;
            console.log(stream.getAudioTracks()[0]);
            audio.onloadedmetadata = function () {
              audio.play();
            };
          });

          document.querySelector(".calling").classList.remove('hidden');
          document.querySelector(".calling .receiverId").innerText = input.value;

          document.querySelector(".calling .cancelcall").onclick = function(){
            document.querySelector(".calling").classList.add('hidden');
            audio.srcObject = null;
            audio.src = null;
            
            conn.close();
          }

          call.on("close", function () {
            
          });
        } catch (error) {
          console.log(error);
          alert(error.message);
        }
      };

      peer.on("connection", function (conn) {
        console.log(conn);
        conn.on("data", function (data) {
          // Will print 'hi!'
          // document.querySelector(".pp").innerText = data;
        });
      });

      peer.on("call", async function (call) {
        if (navigator.mediaDevices === undefined) {
          navigator.mediaDevices = {};
        }
        let ourMediaStream = await navigator.mediaDevices.getUserMedia({
          video: false,
          audio: true,
        });

        // Answer the call, providing our mediaStream
        if (confirm("somebody is calling? accept>?")) {
          call.answer(ourMediaStream);
          call.on("stream", function (stream) {
            // Store a global reference of the other user stream
            window.peer_stream = stream;
            // Display the stream of the other user in the peer-camera video element !
            var audio = document.getElementById("other");
            // var audio = document.querySelector("audio");
            audio.srcObject = stream;
            audio.onloadedmetadata = function () {
              audio.play();
            };
          });

          // Handle when the call finishes
          call.on("close", function () {
            alert("The call has finished");
          });
        } else {
          document.getElementById("other").srcObject = null;
          document.getElementById("me").srcObject = null;
          alert("call rejected");
        }
      });
    </script>
  </body>
</html>
